#if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
library(ggplot2)
library(readr)
library(dplyr)
data(Housing)
Housing <-
Housing %>%
select(price, lotsize)
ggplot(Housing, aes(x = lotsize, y = price)) + geom_point() + labs(x = "lotsize") + labs(y = "price") + scale_colour_hue(l = 50) + geom_smooth(method = lm, size = 1.5) +theme(axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), axis.title=element_text(size = 20))
linear_linear <- lm(price ~ lotsize, Housing)
plot(linear_linear)
summary(linear_linear)
ggplot(Housing, aes(x = log(lotsize), y = price)) + geom_point() + labs(x = "lotsize") + labs(y = "price") + scale_colour_hue(l = 50) + geom_smooth(method = lm, size = 1.5) +theme(axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), axis.title=element_text(size = 20))
linear_log <- lm(price ~ log(lotsize), Housing)
plot(linear_log)
summary(linear_log)
ggplot(Housing, aes(x = lotsize, y = log(price))) + geom_point() + labs(x = "lotsize") + labs(y = "price") + scale_colour_hue(l = 50) + geom_smooth(method = lm, size = 1.5) +theme(axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), axis.title=element_text(size = 20))
log_linear <- lm(log(price) ~ lotsize, Housing)
plot(log_linear)
summary(log_linear)
ggplot(Housing, aes(x = log(lotsize), y = log(price))) + geom_point() + labs(x = "lotsize") + labs(y = "price") + scale_colour_hue(l = 50) + geom_smooth(method = lm, size = 1.5) +theme(axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), axis.title=element_text(size = 20))
log_log<- lm(log(price) ~ log(lotsize), Housing)
plot(log_log)
summary(log_log)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ISLR)
library(corrgram)
library(car)
##Import data
dataset<-Carseats
##Exploratory Data Analysis
str(Carseats)
summary(Carseats)
###CORR
#Option 1 use dyplr
Carseats_corr<-select(Carseats, Sales, CompPrice, Income, Advertising, Population, Price, Age, Education)
corrgram(Carseats_corr,order=FALSE, lower.panel=panel.shade,
upper.panel=panel.cor, text.panel=panel.txt)
##Model
#option 1 use factor varialbes
regression1 = lm(Sales~., Carseats)
summary(regression1)
plot(regression1)
#option 2 create our own variables
#Manual encode variables with dplyr
dataset<- dataset %>%
mutate(Bad_Shelve = ifelse(ShelveLoc=="Bad",1,0)) %>%
mutate(Medium_Shelve = ifelse(ShelveLoc=="Medium",1,0)) %>%
mutate(Urban = ifelse(Urban=='Yes', 1, 0))  %>%
mutate(US = ifelse(US=='Yes', 1, 0))
dataset<-subset(dataset, select=-c(ShelveLoc))
regression2 = lm(Sales~., dataset)
summary(regression2)
vif(regression2)
##Interaction Terms
regression4 = lm(Sales~Price + Bad_Shelve + Medium_Shelve , dataset)
summary(regression4)
dataset3<- dataset %>%
mutate(Bad_price = Price*Bad_Shelve) %>%
mutate(Medium_price = Price*Medium_Shelve)
regression5 = lm(Sales~Price + Bad_Shelve + Medium_Shelve + Bad_price + Medium_price, dataset3)
summary(regression5)
unlink("Documents/MS Analytics - Georgia Tech/Courses/ISYE8803_HDDA_High Dimensional Data Analytics/Homework/Homework 3/Q1_cache", recursive = TRUE)
unlink("Documents/MS Analytics - Georgia Tech/Courses/ISYE8803_HDDA_High Dimensional Data Analytics/Homework/Homework 3/Q1_cache", recursive = TRUE)
install.packages(c("dplyr", "knitr", "reticulate", "rmarkdown"))
rmarkdown::pandoc_version()
update.packages(ask = FALSE, checkBuilt = TRUE)
knitr::opts_chunk$set(fig.width=7, fig.height=5, echo = TRUE)
knitr::opts_chunk$set(fig.width=7, fig.height=5, echo = TRUE)
get_pandoc_version
rmarkdown::pandoc_version()
library(psych)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(psych)) install.packages("psych")
library(psych)
if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
mydata <- dplyr::filter(Ecdat::Star, classk=="small.class"|classk=="regular")
# only analyze small and regular size classes
str(mydata)
mydata <- mydata %>%
mutate(totalscore = tmathssk + treadssk) %>%
mutate(small = ifelse(classk=="small.class",1,0)) %>%
mutate(boy = ifelse(sex=="boy",1,0)) %>%
mutate(whiteother = ifelse(race=="white"|race=="other",1,0)) %>%
mutate(freelunch = ifelse(freelunk=="yes",1,0)) %>%
mutate(schoolj = factor(schidkn))
str(mydata)
# get summary stats for small= 0 and small = 1
describeBy(mydata, mydata$small) # describeBy is from the psych package in R
# summary stats across all data
describe(mydata)
# the tidyverse package includes the dplyr, ggplot2, readr, tidyr, tibble, and purrr packages
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(psych)) install.packages("psych")
library(psych)
if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
mydata <- dplyr::filter(Ecdat::Star, classk=="small.class"|classk=="regular")
# only analyze small and regular size classes
str(mydata)
mydata <- mydata %>%
mutate(totalscore = tmathssk + treadssk) %>%
mutate(small = ifelse(classk=="small.class",1,0)) %>%
mutate(boy = ifelse(sex=="boy",1,0)) %>%
mutate(whiteother = ifelse(race=="white"|race=="other",1,0)) %>%
mutate(freelunch = ifelse(freelunk=="yes",1,0)) %>%
mutate(schoolj = factor(schidkn))
str(mydata)
# get summary stats for small= 0 and small = 1
describeBy(mydata, mydata$small) # describeBy is from the psych package in R
# summary stats across all data
describe(mydata)
# Please run a linear regression to understand for the case of small= 0
reg_0 <- lm(totalscore ~  1, data = dplyr::filter(mydata,small == 0))
summary(reg_0)
# Please run a linear regression to understand for the case of small= 1
reg_1 <- lm(totalscore ~  1, data = dplyr::filter(mydata,small == 1))
summary(reg_1)
# Please run a linear regression using all the data using dummy variable for small
reg_all <- lm(totalscore ~  small, data = mydata)
summary(reg_all)
# Add Teacher Experience to the model
reg_2 <- lm(totalscore ~  small + totexpk, data = mydata)
summary(reg_2)
# Add School fixed effects to the model reg-all
reg_3 <- lm(totalscore ~  small + schoolj, data = mydata)
summary(reg_3)
# Add School fixed effects to the model reg_2
reg_4 <- lm(totalscore ~  small + totexpk + schoolj, data = mydata)
summary(reg_4)
# check if small is randomly assigned
reg_5 <- lm(small ~ boy + whiteother + totexpk + freelunch, data = mydata)
summary(reg_5)
#Sorting data by dates
fund2<- fund[order(fund$Date),]
#Sorting data by dates
fund2<- fund[order(fund$Date),]
library(PerformanceAnalytics)
library(xts)
library(lubridate)
############### Video 1: Simple and Compound Interest
#Before running this code - please make sure that contrafund.csv is in your working directory
#use getwd() to find out your working directory and setwd() to set it to any directory you want
#load data and create xts dataset
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
fund <- read.csv("contrafund.csv")
#Installing packages as needed
#NOTE: This statement essentially checks if PerformanceAnalytics package is available
#locally in your R library distribution. If not, it will install it and then include it
#as a part of this code, so that we can use its functions and features
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
#Package Details
#1)Performanceanalytics: A very useful package for investment and financial performance and risk
#analytics. Official Documentation: https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/1.5.3
#Presentation Deck by Package Founders: http://past.rinfinance.com/RinFinance2009/presentations/PA%20Workshop%20Chi%20RFinance%202009-04.pdf
#Quick Video on calculating returns: https://www.youtube.com/watch?v=0rAVPUNf9yI
#2) xts: xts is a useful packge useful in time-series analysis. We use xts package here since
#PerformanceAnalytics functions usually require xts objects (time-series of prices etc.) rather than simple
#lists of prices for more accurate performance evaluation
#3) lubridate: lubridate is a date mainpulation package. We use mdy() function of lubridate to standardize dates of our data
#Useful Resource: https://raw.githubusercontent.com/rstudio/cheatsheets/master/lubridate.pdf
# calling libraries
library(PerformanceAnalytics)
library(xts)
library(lubridate)
############### Video 1: Simple and Compound Interest
#Before running this code - please make sure that contrafund.csv is in your working directory
#use getwd() to find out your working directory and setwd() to set it to any directory you want
#load data and create xts dataset
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
fund <- read.csv("contrafund.csv")
#Installing packages as needed
#NOTE: This statement essentially checks if PerformanceAnalytics package is available
#locally in your R library distribution. If not, it will install it and then include it
#as a part of this code, so that we can use its functions and features
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
#Package Details
#1)Performanceanalytics: A very useful package for investment and financial performance and risk
#analytics. Official Documentation: https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/1.5.3
#Presentation Deck by Package Founders: http://past.rinfinance.com/RinFinance2009/presentations/PA%20Workshop%20Chi%20RFinance%202009-04.pdf
#Quick Video on calculating returns: https://www.youtube.com/watch?v=0rAVPUNf9yI
#2) xts: xts is a useful packge useful in time-series analysis. We use xts package here since
#PerformanceAnalytics functions usually require xts objects (time-series of prices etc.) rather than simple
#lists of prices for more accurate performance evaluation
#3) lubridate: lubridate is a date mainpulation package. We use mdy() function of lubridate to standardize dates of our data
#Useful Resource: https://raw.githubusercontent.com/rstudio/cheatsheets/master/lubridate.pdf
# calling libraries
library(PerformanceAnalytics)
library(xts)
library(lubridate)
############### Video 1: Simple and Compound Interest
#Before running this code - please make sure that contrafund.csv is in your working directory
#use getwd() to find out your working directory and setwd() to set it to any directory you want
#load data and create xts dataset
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
fund <- read.csv("contrafund.csv")
#Installing packages as needed
#NOTE: This statement essentially checks if PerformanceAnalytics package is available
#locally in your R library distribution. If not, it will install it and then include it
#as a part of this code, so that we can use its functions and features
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
#Package Details
#1)Performanceanalytics: A very useful package for investment and financial performance and risk
#analytics. Official Documentation: https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/1.5.3
#Presentation Deck by Package Founders: http://past.rinfinance.com/RinFinance2009/presentations/PA%20Workshop%20Chi%20RFinance%202009-04.pdf
#Quick Video on calculating returns: https://www.youtube.com/watch?v=0rAVPUNf9yI
#2) xts: xts is a useful packge useful in time-series analysis. We use xts package here since
#PerformanceAnalytics functions usually require xts objects (time-series of prices etc.) rather than simple
#lists of prices for more accurate performance evaluation
#3) lubridate: lubridate is a date mainpulation package. We use mdy() function of lubridate to standardize dates of our data
#Useful Resource: https://raw.githubusercontent.com/rstudio/cheatsheets/master/lubridate.pdf
# calling libraries
library(PerformanceAnalytics)
library(xts)
library(lubridate)
############### Video 1: Simple and Compound Interest
#Before running this code - please make sure that contrafund.csv is in your working directory
#use getwd() to find out your working directory and setwd() to set it to any directory you want
#load data and create xts dataset
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
fund <- read.csv("contrafund.csv")
#Installing packages as needed
#NOTE: This statement essentially checks if PerformanceAnalytics package is available
#locally in your R library distribution. If not, it will install it and then include it
#as a part of this code, so that we can use its functions and features
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
#Package Details
#1)Performanceanalytics: A very useful package for investment and financial performance and risk
#analytics. Official Documentation: https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/1.5.3
#Presentation Deck by Package Founders: http://past.rinfinance.com/RinFinance2009/presentations/PA%20Workshop%20Chi%20RFinance%202009-04.pdf
#Quick Video on calculating returns: https://www.youtube.com/watch?v=0rAVPUNf9yI
#2) xts: xts is a useful packge useful in time-series analysis. We use xts package here since
#PerformanceAnalytics functions usually require xts objects (time-series of prices etc.) rather than simple
#lists of prices for more accurate performance evaluation
#3) lubridate: lubridate is a date mainpulation package. We use mdy() function of lubridate to standardize dates of our data
#Useful Resource: https://raw.githubusercontent.com/rstudio/cheatsheets/master/lubridate.pdf
# calling libraries
library(PerformanceAnalytics)
library(xts)
library(lubridate)
############### Video 1: Simple and Compound Interest
#Before running this code - please make sure that contrafund.csv is in your working directory
#use getwd() to find out your working directory and setwd() to set it to any directory you want
#load data and create xts dataset
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
fund <- read.csv("contrafund.csv")
getwd()
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M4 - Logistic Regression")
setwd("~/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M4 - Logistic Regression")
setwd("~/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M4 - Logistic Regression")
logit_grade <- read_csv("Grades_Data.csv", col_types = list(
Student = col_integer(),
Grade = col_integer(),
Hours = col_double()))
logit_grade <- read.csv("Grades_Data.csv", col_types = list(
Student = col_integer(),
Grade = col_integer(),
Hours = col_double()))
#create an xts dataset
All.dat <- xts(fund2[,-1],order.by = fund2[,1],)
setwd("~/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M6 - Financial Risk and Return")
R code used in Module: Introduction and Measuring Risk and Return
#R code used in Module: Introduction and Measuring Risk and Return
#Installing packages as needed
#NOTE: This statement essentially checks if PerformanceAnalytics package is available
#locally in your R library distribution. If not, it will install it and then include it
#as a part of this code, so that we can use its functions and features
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
#Package Details
#1)Performanceanalytics: A very useful package for investment and financial performance and risk
#analytics. Official Documentation: https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/1.5.3
#Presentation Deck by Package Founders: http://past.rinfinance.com/RinFinance2009/presentations/PA%20Workshop%20Chi%20RFinance%202009-04.pdf
#Quick Video on calculating returns: https://www.youtube.com/watch?v=0rAVPUNf9yI
#2) xts: xts is a useful packge useful in time-series analysis. We use xts package here since
#PerformanceAnalytics functions usually require xts objects (time-series of prices etc.) rather than simple
#lists of prices for more accurate performance evaluation
#3) lubridate: lubridate is a date mainpulation package. We use mdy() function of lubridate to standardize dates of our data
#Useful Resource: https://raw.githubusercontent.com/rstudio/cheatsheets/master/lubridate.pdf
# calling libraries
library(PerformanceAnalytics)
library(xts)
library(lubridate)
fund <- read.csv("contrafund.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(tidyquant)) install.packages("tidyquant")
if (!require(PerformanceAnalytics)) install.packages("PerformanceAnalytics")
if (!require(xts)) install.packages("xts")
if (!require(lubridate)) install.packages("lubridate")
if (!require(Quandl)) install.packages("Quandl")
if (!require(riingo)) install.packages("riingo")
library(tidyverse)
library(tidyquant)
library(PerformanceAnalytics)
library(xts)
library(lubridate)
library(Quandl)
library(riingo)
# Need to sign up for a free api key at https://api.tiingo.com/
# api_key <-  config::get("tiingo", file = "config.yml")
# Then copy your own token from https://api.tiingo.com/account/api/token
# Else you can use this token (from one of our TAs, but it might stop working at somet point)
api_key <-  "224f4bd36f0875f94c4cb328cba5f1716d4aad64"
# Need to set the key so this R session can pass it to the Tiingo API
riingo_set_token(api_key)
# These are our tickers of interest
tickers <- c(
"SPY",
"EFA",
"IJS",
"EEM",
"AGG",
"TLT",
"VNQ")
tickers <- "SPY"
# Now we can use the `riingo_prices()` function from the `riingo` package. Can look at docs for riingo package to see what the function returns.
prices_volume_via_api_2020 <-
tickers %>%
riingo_prices(start_date = "2020-01-01", end_date = Sys.Date()) %>%
select(ticker, date, close, volume) %>%
mutate(date = ymd(date))
?riingo_prices()
prices_volume_via_api_2020 %>%
head()
prices_volume_via_tq_2020 <-
tickers %>%
tq_get(get = "tiingo", from = "2020-01-01") %>%
select(date,ticker = symbol, close, volume) %>%
mutate(date = as.Date(date))
Quandl.api_key("9aKMYc6XUnLgxw4hS1kM")
market <- Quandl("BCIW/_INX", start_date="2010-01-01", end_date=Sys.Date())
stock_prices <- c("AAPL", "GOOG", "NFLX") %>%
tq_get(get  = "tiingo",
from = "2010-01-01",
to   = Sys.Date())
baseline_returns_monthly <- "XLK" %>%
tq_get(get  = "tiingo",
from = "2010-01-01",
to   = Sys.Date()) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Rb")
### Install 3 Finance packages:
library(PerformanceAnalytics)
library(xts)
library(lubridate)
# Set your directory where your datafile is
getwd()
# if needed, use setwd("[input your directory name]")
# Load the data provided (for the Contrafund, a Fidelity mutual fund) and create an xts dataset
fund <- read.csv("contrafund.csv")
library(PerformanceAnalytics)
library(xts)
library(lubridate)
# Set your directory where your datafile is
getwd()
getwd()
setwd("~/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M7 - Measuring Risk Adjusted Performance")
# Load the data provided (for the Contrafund, a Fidelity mutual fund) and create an xts dataset
fund <- read.csv("contrafund.csv")
getwd()
setwd("~/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M7 - Measuring Risk Adjusted Performance")
fund <- read.csv("contrafund.csv")
fund <- read.csv("~\\Documents\\MS Analytics - Georgia Tech\\Courses\\MGT6203_DAB - Data Analytics in Business\\Class Materials\\M7 - Measuring Risk Adjusted Performance\\contrafund.csv")
fund <- read.csv("~Users\\chuksokoli\\Documents\\MS Analytics - Georgia Tech\\Courses\\MGT6203_DAB - Data Analytics in Business\\Class Materials\\M7 - Measuring Risk Adjusted Performance\\contrafund.csv")
fund <- read.csv(file.choose(), header=TRUE)
View(fund)
# Change the date variable from character type to date type
fund$Date <- mdy(fund$Date)
View(fund)
View(fund)
fund2 <- fund[order(fund$Date),]
fund2
View(fund2)
View(fund2)
fund3 <- xts(fund2[,-1], order.by=fund2[,1],)
fund3
View(fund3)
View(fund3)
fund3 <- xts(fund2[,-1], order.by=fund2[,1],)
fund3
Return.cumulative(fund3, geometric =TRUE)
setwd("/Users/chuksokoli/Documents/MS Analytics - Georgia Tech/Courses/MGT6203_DAB - Data Analytics in Business/Class Materials/M10 - Integrated Digital Marketing")
setwd("/Users/chuksokoli/Documents/Online _Coursera/IBM Data Engineering Professional/Course 3 - Python Project for Data Engineering/4. Application Development and Packaging using Python")
setwd("~/Documents/Online _Coursera/IBM Data Engineering Professional/Course 3 - Python Project for Data Engineering")
setwd("~/Documents/Online _Coursera/IBM Data Engineering Professional/Course 3 - Python Project for Data Engineering")
setwd("/Users/chuksokoli/Documents/Online _Coursera/IBM Data Engineering Professional/Course 5 - Databases and SQL for Data Science with Python")
setwd("/Users/chuksokoli/Documents/Online _Coursera/IBM Data Engineering Professional/Course 6 - Hands-on Introduction to Linus Commands and Shell Scripting")
setwd("/Users/chuksokoli/Documents/Online _Coursera/IBM Data Engineering Professional/Course 7 - Relational Database Administration (DBA)")
